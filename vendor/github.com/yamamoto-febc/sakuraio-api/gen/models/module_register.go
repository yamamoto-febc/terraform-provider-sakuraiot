package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ModuleRegister Module Register Information
// swagger:model ModuleRegister
type ModuleRegister struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// Project ID
	// Required: true
	Project *int64 `json:"project"`

	// register id
	// Required: true
	RegisterID *string `json:"register_id"`

	// register pass
	// Required: true
	RegisterPass *string `json:"register_pass"`
}

// Validate validates this module register
func (m *ModuleRegister) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegisterID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegisterPass(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModuleRegister) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModuleRegister) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("project", "body", m.Project); err != nil {
		return err
	}

	return nil
}

func (m *ModuleRegister) validateRegisterID(formats strfmt.Registry) error {

	if err := validate.Required("register_id", "body", m.RegisterID); err != nil {
		return err
	}

	return nil
}

func (m *ModuleRegister) validateRegisterPass(formats strfmt.Registry) error {

	if err := validate.Required("register_pass", "body", m.RegisterPass); err != nil {
		return err
	}

	return nil
}
