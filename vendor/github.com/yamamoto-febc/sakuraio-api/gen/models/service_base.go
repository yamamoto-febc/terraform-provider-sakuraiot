package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ServiceBase service base
// swagger:model ServiceBase
type ServiceBase struct {

	// j w t
	JWT string `json:"JWT,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Project ID
	Project int64 `json:"project,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this service base
func (m *ServiceBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceBaseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["websocket","outgoing-webhook","incoming-webhook"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceBaseTypeTypePropEnum = append(serviceBaseTypeTypePropEnum, v)
	}
}

const (
	serviceBaseTypeWebsocket       string = "websocket"
	serviceBaseTypeOutgoingWebhook string = "outgoing-webhook"
	serviceBaseTypeIncomingWebhook string = "incoming-webhook"
)

// prop value enum
func (m *ServiceBase) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceBaseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceBase) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
