package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Auth auth
// swagger:model Auth
type Auth struct {

	// j w t
	JWT string `json:"JWT,omitempty"`

	// level
	Level int64 `json:"level,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this auth
func (m *Auth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var authTypeLevelPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[100,200,300]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authTypeLevelPropEnum = append(authTypeLevelPropEnum, v)
	}
}

// prop value enum
func (m *Auth) validateLevelEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, authTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Auth) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}
