package module

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new module API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for module API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1ModulesModuleID deletes module

Delete a module based on single ID
*/
func (a *Client) DeleteV1ModulesModuleID(params *DeleteV1ModulesModuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ModulesModuleIDOK, *DeleteV1ModulesModuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ModulesModuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteV1ModulesModuleID",
		Method:             "DELETE",
		PathPattern:        "/v1/modules/{moduleId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ModulesModuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteV1ModulesModuleIDOK:
		return value, nil, nil
	case *DeleteV1ModulesModuleIDNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetV1Modules modules list

Returns modules list
*/
func (a *Client) GetV1Modules(params *GetV1ModulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ModulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1Modules",
		Method:             "GET",
		PathPattern:        "/v1/modules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ModulesOK), nil

}

/*
GetV1ModulesModuleID gets module

Returns a module based on a single ID
*/
func (a *Client) GetV1ModulesModuleID(params *GetV1ModulesModuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ModulesModuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ModulesModuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1ModulesModuleID",
		Method:             "GET",
		PathPattern:        "/v1/modules/{moduleId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ModulesModuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ModulesModuleIDOK), nil

}

/*
PostV1Modules registers module

Regsiter a new module
*/
func (a *Client) PostV1Modules(params *PostV1ModulesParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ModulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ModulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV1Modules",
		Method:             "POST",
		PathPattern:        "/v1/modules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ModulesCreated), nil

}

/*
PutV1ModulesModuleID updates module

Update a module based on a single ID
*/
func (a *Client) PutV1ModulesModuleID(params *PutV1ModulesModuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutV1ModulesModuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ModulesModuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutV1ModulesModuleID",
		Method:             "PUT",
		PathPattern:        "/v1/modules/{moduleId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1ModulesModuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ModulesModuleIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
