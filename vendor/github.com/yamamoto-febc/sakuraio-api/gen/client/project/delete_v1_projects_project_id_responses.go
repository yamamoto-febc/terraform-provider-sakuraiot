package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteV1ProjectsProjectIDReader is a Reader for the DeleteV1ProjectsProjectID structure.
type DeleteV1ProjectsProjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteV1ProjectsProjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteV1ProjectsProjectIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewDeleteV1ProjectsProjectIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteV1ProjectsProjectIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteV1ProjectsProjectIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteV1ProjectsProjectIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDeleteV1ProjectsProjectIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteV1ProjectsProjectIDOK creates a DeleteV1ProjectsProjectIDOK with default headers values
func NewDeleteV1ProjectsProjectIDOK() *DeleteV1ProjectsProjectIDOK {
	return &DeleteV1ProjectsProjectIDOK{}
}

/*DeleteV1ProjectsProjectIDOK handles this case with default header values.

Successful
*/
type DeleteV1ProjectsProjectIDOK struct {
}

func (o *DeleteV1ProjectsProjectIDOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/][%d] deleteV1ProjectsProjectIdOK ", 200)
}

func (o *DeleteV1ProjectsProjectIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteV1ProjectsProjectIDNoContent creates a DeleteV1ProjectsProjectIDNoContent with default headers values
func NewDeleteV1ProjectsProjectIDNoContent() *DeleteV1ProjectsProjectIDNoContent {
	return &DeleteV1ProjectsProjectIDNoContent{}
}

/*DeleteV1ProjectsProjectIDNoContent handles this case with default header values.

No Content
*/
type DeleteV1ProjectsProjectIDNoContent struct {
}

func (o *DeleteV1ProjectsProjectIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/][%d] deleteV1ProjectsProjectIdNoContent ", 204)
}

func (o *DeleteV1ProjectsProjectIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteV1ProjectsProjectIDUnauthorized creates a DeleteV1ProjectsProjectIDUnauthorized with default headers values
func NewDeleteV1ProjectsProjectIDUnauthorized() *DeleteV1ProjectsProjectIDUnauthorized {
	return &DeleteV1ProjectsProjectIDUnauthorized{}
}

/*DeleteV1ProjectsProjectIDUnauthorized handles this case with default header values.

Unauthenticated
*/
type DeleteV1ProjectsProjectIDUnauthorized struct {
}

func (o *DeleteV1ProjectsProjectIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/][%d] deleteV1ProjectsProjectIdUnauthorized ", 401)
}

func (o *DeleteV1ProjectsProjectIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteV1ProjectsProjectIDForbidden creates a DeleteV1ProjectsProjectIDForbidden with default headers values
func NewDeleteV1ProjectsProjectIDForbidden() *DeleteV1ProjectsProjectIDForbidden {
	return &DeleteV1ProjectsProjectIDForbidden{}
}

/*DeleteV1ProjectsProjectIDForbidden handles this case with default header values.

Forbidden
*/
type DeleteV1ProjectsProjectIDForbidden struct {
}

func (o *DeleteV1ProjectsProjectIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/][%d] deleteV1ProjectsProjectIdForbidden ", 403)
}

func (o *DeleteV1ProjectsProjectIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteV1ProjectsProjectIDNotFound creates a DeleteV1ProjectsProjectIDNotFound with default headers values
func NewDeleteV1ProjectsProjectIDNotFound() *DeleteV1ProjectsProjectIDNotFound {
	return &DeleteV1ProjectsProjectIDNotFound{}
}

/*DeleteV1ProjectsProjectIDNotFound handles this case with default header values.

Not found
*/
type DeleteV1ProjectsProjectIDNotFound struct {
}

func (o *DeleteV1ProjectsProjectIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/][%d] deleteV1ProjectsProjectIdNotFound ", 404)
}

func (o *DeleteV1ProjectsProjectIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteV1ProjectsProjectIDConflict creates a DeleteV1ProjectsProjectIDConflict with default headers values
func NewDeleteV1ProjectsProjectIDConflict() *DeleteV1ProjectsProjectIDConflict {
	return &DeleteV1ProjectsProjectIDConflict{}
}

/*DeleteV1ProjectsProjectIDConflict handles this case with default header values.

Conflict error
*/
type DeleteV1ProjectsProjectIDConflict struct {
}

func (o *DeleteV1ProjectsProjectIDConflict) Error() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/][%d] deleteV1ProjectsProjectIdConflict ", 409)
}

func (o *DeleteV1ProjectsProjectIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
