package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1ProjectsProjectID deletes project

Delete a project based on single ID
*/
func (a *Client) DeleteV1ProjectsProjectID(params *DeleteV1ProjectsProjectIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ProjectsProjectIDOK, *DeleteV1ProjectsProjectIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ProjectsProjectIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteV1ProjectsProjectID",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ProjectsProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteV1ProjectsProjectIDOK:
		return value, nil, nil
	case *DeleteV1ProjectsProjectIDNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetV1Projects projects list

Returns projects list.
*/
func (a *Client) GetV1Projects(params *GetV1ProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1Projects",
		Method:             "GET",
		PathPattern:        "/v1/projects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ProjectsOK), nil

}

/*
GetV1ProjectsProjectID gets project

Returns a project based on a single ID
*/
func (a *Client) GetV1ProjectsProjectID(params *GetV1ProjectsProjectIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ProjectsProjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ProjectsProjectIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1ProjectsProjectID",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ProjectsProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ProjectsProjectIDOK), nil

}

/*
PostV1Projects creates project

Creates a new project
*/
func (a *Client) PostV1Projects(params *PostV1ProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ProjectsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV1Projects",
		Method:             "POST",
		PathPattern:        "/v1/projects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ProjectsCreated), nil

}

/*
PutV1ProjectsProjectID updates project

Update a project based on a single ID
*/
func (a *Client) PutV1ProjectsProjectID(params *PutV1ProjectsProjectIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutV1ProjectsProjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ProjectsProjectIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutV1ProjectsProjectID",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{projectId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1ProjectsProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ProjectsProjectIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
