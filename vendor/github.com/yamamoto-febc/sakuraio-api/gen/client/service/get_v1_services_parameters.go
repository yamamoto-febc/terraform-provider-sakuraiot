package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetV1ServicesParams creates a new GetV1ServicesParams object
// with the default values initialized.
func NewGetV1ServicesParams() *GetV1ServicesParams {
	var ()
	return &GetV1ServicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1ServicesParamsWithTimeout creates a new GetV1ServicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetV1ServicesParamsWithTimeout(timeout time.Duration) *GetV1ServicesParams {
	var ()
	return &GetV1ServicesParams{

		timeout: timeout,
	}
}

// NewGetV1ServicesParamsWithContext creates a new GetV1ServicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetV1ServicesParamsWithContext(ctx context.Context) *GetV1ServicesParams {
	var ()
	return &GetV1ServicesParams{

		Context: ctx,
	}
}

/*GetV1ServicesParams contains all the parameters to send to the API endpoint
for the get v1 services operation typically these are written to a http.Request
*/
type GetV1ServicesParams struct {

	/*Project
	  ID of project

	*/
	Project *int64
	/*Sort
	  Sort fields

	*/
	Sort *string
	/*Type
	  Type of service

	*/
	Type *string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the get v1 services params
func (o *GetV1ServicesParams) WithTimeout(timeout time.Duration) *GetV1ServicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 services params
func (o *GetV1ServicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 services params
func (o *GetV1ServicesParams) WithContext(ctx context.Context) *GetV1ServicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 services params
func (o *GetV1ServicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithProject adds the project to the get v1 services params
func (o *GetV1ServicesParams) WithProject(project *int64) *GetV1ServicesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get v1 services params
func (o *GetV1ServicesParams) SetProject(project *int64) {
	o.Project = project
}

// WithSort adds the sort to the get v1 services params
func (o *GetV1ServicesParams) WithSort(sort *string) *GetV1ServicesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get v1 services params
func (o *GetV1ServicesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithType adds the typeVar to the get v1 services params
func (o *GetV1ServicesParams) WithType(typeVar *string) *GetV1ServicesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get v1 services params
func (o *GetV1ServicesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1ServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Project != nil {

		// query param project
		var qrProject int64
		if o.Project != nil {
			qrProject = *o.Project
		}
		qProject := swag.FormatInt64(qrProject)
		if qProject != "" {
			if err := r.SetQueryParam("project", qProject); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
