package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1ServicesServiceID deletes service

Delete a service based on a singele ID
*/
func (a *Client) DeleteV1ServicesServiceID(params *DeleteV1ServicesServiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ServicesServiceIDOK, *DeleteV1ServicesServiceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ServicesServiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteV1ServicesServiceID",
		Method:             "DELETE",
		PathPattern:        "/v1/services/{serviceId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ServicesServiceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteV1ServicesServiceIDOK:
		return value, nil, nil
	case *DeleteV1ServicesServiceIDNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetV1Services services list

Returns services list
*/
func (a *Client) GetV1Services(params *GetV1ServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1Services",
		Method:             "GET",
		PathPattern:        "/v1/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ServicesOK), nil

}

/*
GetV1ServicesServiceIDTypeIncomingWebhook gets incoming webhook service

Returns a IncomingWebhook Service based on a single ID
*/
func (a *Client) GetV1ServicesServiceIDTypeIncomingWebhook(params *GetV1ServicesServiceIDTypeIncomingWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ServicesServiceIDTypeIncomingWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ServicesServiceIDTypeIncomingWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1ServicesServiceIDTypeIncomingWebhook",
		Method:             "GET",
		PathPattern:        "/v1/services/{serviceId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ServicesServiceIDTypeIncomingWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ServicesServiceIDTypeIncomingWebhookOK), nil

}

/*
GetV1ServicesServiceIDTypeOutgoingWebhook gets outgoing webhook service

Returns a OutgoingWebhook Service based on a single ID
*/
func (a *Client) GetV1ServicesServiceIDTypeOutgoingWebhook(params *GetV1ServicesServiceIDTypeOutgoingWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ServicesServiceIDTypeOutgoingWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ServicesServiceIDTypeOutgoingWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1ServicesServiceIDTypeOutgoingWebhook",
		Method:             "GET",
		PathPattern:        "/v1/services/{serviceId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ServicesServiceIDTypeOutgoingWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ServicesServiceIDTypeOutgoingWebhookOK), nil

}

/*
GetV1ServicesServiceIDTypeWebsocket gets web socket service

Returns a WebSocket Service based on a single ID
*/
func (a *Client) GetV1ServicesServiceIDTypeWebsocket(params *GetV1ServicesServiceIDTypeWebsocketParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ServicesServiceIDTypeWebsocketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ServicesServiceIDTypeWebsocketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1ServicesServiceIDTypeWebsocket",
		Method:             "GET",
		PathPattern:        "/v1/services/{serviceId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ServicesServiceIDTypeWebsocketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ServicesServiceIDTypeWebsocketOK), nil

}

/*
PostV1ServicesTypeIncomingWebhook creates incoming webhook service

Create a new incoming webhook service
*/
func (a *Client) PostV1ServicesTypeIncomingWebhook(params *PostV1ServicesTypeIncomingWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ServicesTypeIncomingWebhookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ServicesTypeIncomingWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV1ServicesTypeIncomingWebhook",
		Method:             "POST",
		PathPattern:        "/v1/services/?type=incoming-webhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ServicesTypeIncomingWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ServicesTypeIncomingWebhookCreated), nil

}

/*
PostV1ServicesTypeOutgoingWebhook creates outgoing webhook service

Create a new outgoing webhook service
*/
func (a *Client) PostV1ServicesTypeOutgoingWebhook(params *PostV1ServicesTypeOutgoingWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ServicesTypeOutgoingWebhookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ServicesTypeOutgoingWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV1ServicesTypeOutgoingWebhook",
		Method:             "POST",
		PathPattern:        "/v1/services/?type=outgoing-webhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ServicesTypeOutgoingWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ServicesTypeOutgoingWebhookCreated), nil

}

/*
PostV1ServicesTypeWebsocket creates web socket service

Create a new WebSocket service
*/
func (a *Client) PostV1ServicesTypeWebsocket(params *PostV1ServicesTypeWebsocketParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ServicesTypeWebsocketCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ServicesTypeWebsocketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV1ServicesTypeWebsocket",
		Method:             "POST",
		PathPattern:        "/v1/services/?type=websocket",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ServicesTypeWebsocketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ServicesTypeWebsocketCreated), nil

}

/*
PutV1ServicesServiceIDTypeIncomingWebhook updates incoming webhook service

Update a IncomingWebhook Service based on single ID
*/
func (a *Client) PutV1ServicesServiceIDTypeIncomingWebhook(params *PutV1ServicesServiceIDTypeIncomingWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*PutV1ServicesServiceIDTypeIncomingWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ServicesServiceIDTypeIncomingWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutV1ServicesServiceIDTypeIncomingWebhook",
		Method:             "PUT",
		PathPattern:        "/v1/services/{serviceId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1ServicesServiceIDTypeIncomingWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ServicesServiceIDTypeIncomingWebhookOK), nil

}

/*
PutV1ServicesServiceIDTypeOutgoingWebhook updates outgoing webhook service

Update a OutgoingWebhook Service based on single ID
*/
func (a *Client) PutV1ServicesServiceIDTypeOutgoingWebhook(params *PutV1ServicesServiceIDTypeOutgoingWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*PutV1ServicesServiceIDTypeOutgoingWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ServicesServiceIDTypeOutgoingWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutV1ServicesServiceIDTypeOutgoingWebhook",
		Method:             "PUT",
		PathPattern:        "/v1/services/{serviceId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1ServicesServiceIDTypeOutgoingWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ServicesServiceIDTypeOutgoingWebhookOK), nil

}

/*
PutV1ServicesServiceIDTypeWebsocket updates web socket service

Update a WebSocket Service based on single ID
*/
func (a *Client) PutV1ServicesServiceIDTypeWebsocket(params *PutV1ServicesServiceIDTypeWebsocketParams, authInfo runtime.ClientAuthInfoWriter) (*PutV1ServicesServiceIDTypeWebsocketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ServicesServiceIDTypeWebsocketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutV1ServicesServiceIDTypeWebsocket",
		Method:             "PUT",
		PathPattern:        "/v1/services/{serviceId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1ServicesServiceIDTypeWebsocketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ServicesServiceIDTypeWebsocketOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
